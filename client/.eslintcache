[{"C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\index.js":"1","C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\reportWebVitals.js":"2","C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\App.js":"3","C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\containers\\Home.js":"4","C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\containers\\People.js":"5","C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\containers\\Signup.js":"6","C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\containers\\Navbar.js":"7","C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\containers\\UserTweets.js":"8","C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\containers\\Signin.js":"9","C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\components\\AddPostModal.js":"10","C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\components\\TweetsList.js":"11","C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\components\\Pagination.js":"12","C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\components\\PeopleList.js":"13","C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\misc\\loader.js":"14","C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\misc\\imageUpload.js":"15","C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\components\\Tweet.js":"16","C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\components\\Person.js":"17","C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\misc\\firebase.js":"18","C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\config.js":"19","C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\components\\ProfileModal.js":"20"},{"size":521,"mtime":1613947377113,"results":"21","hashOfConfig":"22"},{"size":375,"mtime":1613947377117,"results":"23","hashOfConfig":"22"},{"size":1818,"mtime":1613947377098,"results":"24","hashOfConfig":"22"},{"size":3437,"mtime":1613947377106,"results":"25","hashOfConfig":"22"},{"size":5301,"mtime":1613947377108,"results":"26","hashOfConfig":"22"},{"size":5525,"mtime":1613947377110,"results":"27","hashOfConfig":"22"},{"size":6569,"mtime":1613951343816,"results":"28","hashOfConfig":"22"},{"size":8653,"mtime":1613947377111,"results":"29","hashOfConfig":"22"},{"size":2687,"mtime":1613947377109,"results":"30","hashOfConfig":"22"},{"size":3879,"mtime":1613947377099,"results":"31","hashOfConfig":"22"},{"size":661,"mtime":1613947377104,"results":"32","hashOfConfig":"22"},{"size":1981,"mtime":1613947377100,"results":"33","hashOfConfig":"22"},{"size":1225,"mtime":1613947377101,"results":"34","hashOfConfig":"22"},{"size":527,"mtime":1613947377116,"results":"35","hashOfConfig":"22"},{"size":2581,"mtime":1613947377115,"results":"36","hashOfConfig":"22"},{"size":8216,"mtime":1613947377104,"results":"37","hashOfConfig":"22"},{"size":1743,"mtime":1613947377102,"results":"38","hashOfConfig":"22"},{"size":829,"mtime":1613951761391,"results":"39","hashOfConfig":"22"},{"size":458,"mtime":1613953518270,"results":"40","hashOfConfig":"22"},{"size":3286,"mtime":1613947377103,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"13niija",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"44"},"C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\index.js",[],["93","94"],"C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\reportWebVitals.js",[],"C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\App.js",["95"],"import {BrowserRouter, Route, Redirect, useHistory} from 'react-router-dom';\r\nimport {useState} from 'react';\r\n\r\nimport './App.css';\r\nimport Home from './containers/Home';\r\nimport UserTweets from './containers/UserTweets';\r\nimport People from './containers/People';\r\nimport Signin from './containers/Signin';\r\nimport Signup from './containers/Signup';\r\nimport Navbar from './containers/Navbar';\r\n\r\n/*\r\n  1. No need for having a global state management of username and jwt because it is only needed one level down the compoment tree.\r\n */\r\n\r\nfunction App() {\r\n  const [jwt, setJwt] = useState(localStorage.getItem(\"jwt\"));\r\n  const [user, setUser] = useState(localStorage.getItem(\"user\"));\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <div>\r\n        <Navbar jwt={jwt}/>\r\n        <Route exact path='/' render={() => <Home show_profile={true} username = {user ? JSON.parse(user).username : null}/>} />\r\n        <Route path='/userTweets' render={() => {\r\n          if(jwt && user)\r\n            return <UserTweets editable={true} logged={true} username = {JSON.parse(user).username}/> \r\n          else\r\n            return <Redirect to=\"/signin\" />\r\n        }}/>\r\n        <Route path='/people' render={() => {\r\n          if(jwt && user)\r\n            return <People username = {JSON.parse(user).username} loader_name=\"loader3\" show_profile={true}/> \r\n          else\r\n            return <Redirect to=\"/signin\"/>\r\n        }}/>\r\n        <Route path='/signin' render={() => <Signin setJwt={setJwt} setUser={setUser}/>} />\r\n        <Route path='/signup' component={Signup} />\r\n        <Route path='/signout' render={() => {\r\n          localStorage.clear();\r\n          setJwt(null); \r\n          setUser(null);\r\n          return <Redirect to = '/' />\r\n        }} />\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\containers\\Home.js",["96"],"import React, {useEffect, useState} from 'react';\r\nimport M from 'materialize-css';\r\nimport axios from 'axios';\r\n\r\nimport TweetsList from '../components/TweetsList';\r\nimport Pagination from \"../components/Pagination\";\r\nimport loader from \"../misc/loader\";\r\n\r\n/*REFRENCES - 1. FOR PAGINATION - https://www.youtube.com/watch?v=soWg_UtD_AMw\r\n*/\r\n\r\n// <span className=\"comment-style\" style={{color: \"black\"}}>- 1 Day Ago</span>\r\n \r\n//TO-DO - STYLE THE TWEET CARD BETTER\r\nconst Home = (props) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [total_pages, setTotalPages] = useState(0);\r\n    const [posts, setPosts] = useState([]);\r\n    const [first_render, setFirstRender] = useState(true);\r\n\r\n    useEffect( () => {\r\n        loader(true,/* 'loader1'*/);\r\n\r\n        //NOTE - This show timeout is only used to show the loader features\r\n        //TO-DO - Remove timeout when using later\r\n        setTimeout(() => {\r\n            axios.get(`api/getAllTweets?page=${page}&username=${props.username}`)\r\n            .then(res => {\r\n                if(res.data.success){\r\n                    setPosts(res.data.posts);\r\n                    setTotalPages(res.data.pages);\r\n                }\r\n                else\r\n                    M.toast({html: res.data.msg, classes: res.data.toastColor});\r\n                loader(false/*, 'loader1'*/);\r\n                if(first_render)\r\n                    setFirstRender(false);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                M.toast({html: \"Internl Error occured - Could Not Fetch Posts. Try later (F)\", classes: \"#c62828 red darken-3\"});\r\n                loader(false/*, 'loader1'*/);\r\n            })\r\n        }, 1000)\r\n        \r\n    }, [page]);\r\n\r\n    //Even though you drill props through the TweetList & People modal component (which don't need them. They just pass it to their child).\r\n    //You did't manage these props with global context as then every time you would have closed the modal\r\n    //Then you had to change the global state to the authenticated user which would have been an additional step.\r\n    //And also only 3 or 4 levels of nesting is happening so it is not that big a problem \r\n    return (   \r\n        <div className=\"container\" id=\"main-container\">\r\n            <div className=\"progress\" /*id=\"loader1\"*/>\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n            { \r\n            (posts.length === 0) ? (first_render) ? null : <center><h5>No Tweets :(</h5></center> :\r\n                <div className=\"row\">\r\n                    <div className=\"hide-on-small-only\">\r\n                        <TweetsList posts={posts} range={[0,4]} show_profile = {props.show_profile} col_size=\"col s6\"/>\r\n                        <TweetsList posts={posts} range={[5,9]} show_profile = {props.show_profile} col_size=\"col s6\"/>\r\n                    </div>\r\n                    <div className=\"show-on-small hide-on-med-and-up\">\r\n                        <TweetsList posts={posts} range={[0,9]} show_profile = {props.show_profile} col_size=\"col s12\"/>\r\n                    </div>\r\n                    {/* <Pagination page={page} setPage={setPage} total_pages={total_pages} /> */}\r\n                </div>\r\n            }\r\n            <div className=\"row\">\r\n                <Pagination page={page} setPage={setPage} total_pages={total_pages} />\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n\r\nexport default Home;","C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\containers\\People.js",["97","98"],"import axios from 'axios';\r\nimport React, {useState, useEffect} from 'react';\r\nimport M from 'materialize-css';\r\n\r\nimport PeopleList from '../components/PeopleList';\r\nimport loader from '../misc/loader';\r\n\r\n//STATIC HTML Given at end - in comments- IF YOU WANT TO PRACICE\r\n\r\nconst People = (props) => {\r\n\r\n    const [people, setPeople] = useState({followers: [], followings: []});\r\n    const [first_render, setFirstRender] = useState(true);\r\n\r\n    useEffect( () => {\r\n        loader(true/*, props.loader_name*/);\r\n\r\n        axios.get(`api/people?username=${props.username}`, {}, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + localStorage.getItem(\"jwt\"),\r\n                }\r\n        })\r\n        .then(res => {\r\n            if(res.data.success){\r\n                let followers = [];\r\n                let followings = [];\r\n                for(let person of res.data.people){\r\n                    if(person.followee === props.username)\r\n                        followings.push({username: person.follower, _id: person._id, profile_pic_url: person.pics.follower});\r\n                    else\r\n                        followers.push({username: person.followee, _id: person._id, profile_pic_url: person.pics.followee});\r\n                }\r\n                setPeople({followers, followings});\r\n            }\r\n            else\r\n                M.toast({html: res.data.msg, classes: res.data.toastColor});\r\n            loader(false/*, props.loader_name*/);\r\n            if(first_render)\r\n                setFirstRender(false);\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            M.toast({html: \"Internl Error occured - Could Not Fetch Posts. Try later (F)\", classes: \"#c62828 red darken-3\"});\r\n            loader(false/*, props.loader_name*/);\r\n        });\r\n        \r\n    }, []);\r\n\r\n\r\n    return (   \r\n        <div className=\"container\" id=\"main-container\" style={{paddingLeft: \"2%\", paddingRight: \"2%\"}}>\r\n            <div className=\"progress\">{/*id={props.loader_name} >*/}\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n            { \r\n            (people.length === 0) ? (first_render) ? null : <center><h5>You are Connected to no one.</h5></center> :\r\n            [   <div className=\"row hide-on-small-only\" key=\"display1\">\r\n                    <PeopleList people={people} col_size=\"col s6\" show_profile={props.show_profile}/>\r\n                </div>,\r\n                <div className=\"row show-on-small hide-on-med-and-up\" key=\"display2\">\r\n                    <PeopleList people={people} col_size=\"col s12\" show_profile={props.show_profile}/>\r\n                </div>  ]\r\n            }\r\n        </div>\r\n     );\r\n}\r\n\r\nexport default People;\r\n\r\n\r\n\r\n{/* return (\r\n        \r\n        <div className=\"container\" style={{paddingLeft: \"2%\", paddingRight: \"2%\"}}>\r\n        <div className=\"row\">\r\n            <div className = \"col s6\" style={{paddingRight: \"9%\"}}>\r\n                <center style={{marginBottom: \"15px\", fontWeight:\"bold\"}}>Followers</center>\r\n                <ul className=\"collection\">\r\n                    <li className=\"collection-item avatar\" key= \"SD\" >\r\n                        <div style={{padding:\"10px\"}}>\r\n                        <img src=\"images/yuna.jpg\" alt=\"\" className=\"circle\"/>\r\n                        </div>\r\n                    <span className=\"title\">Title</span>\r\n                    </li>\r\n                    <li className=\"collection-item avatar\">\r\n                    <div style={{padding:\"10px\"}}>\r\n                        <i className=\"material-icons circle\">person</i>\r\n                    </div>\r\n                    <span className=\"title\">Title</span>\r\n                    </li>\r\n                    <li className=\"collection-item avatar\">\r\n                    <div style={{padding:\"10px\"}}>\r\n                        <i className=\"material-icons circle\">person</i>\r\n                    </div>\r\n                    <span className=\"title\">Title</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <div className = \"col s6\" style={{paddingLeft: \"9%\"}}>\r\n                <center style={{marginBottom: \"15px\", fontWeight:\"bold\"}}>Following</center>\r\n                <ul className=\"collection\">\r\n                    <li className=\"collection-item avatar\">\r\n                        <div style={{padding:\"10px\"}}>\r\n                            <img src=\"images/yuna.jpg\" alt=\"\" className=\"circle\"/>\r\n                        </div>\r\n                        <span className=\"title\">Title</span>\r\n                    </li>\r\n                    <li className=\"collection-item avatar\">\r\n                    <div style={{padding:\"10px\"}}>\r\n                        <i className=\"material-icons circle\">person</i>\r\n                    </div>\r\n                    <span className=\"title\">Title</span>\r\n                    </li>\r\n                    <li className=\"collection-item avatar\">\r\n                    <div style={{padding:\"10px\"}}>\r\n                        <i className=\"material-icons circle\">person</i>\r\n                    </div>\r\n                    <span className=\"title\">Title</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    </div> \r\n        )*/}","C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\containers\\Signup.js",["99","100"],"import React, {useState} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport M from 'materialize-css';\r\n\r\nimport handleUpload from \"../misc/imageUpload\";\r\n\r\nconst Signup = (props) => {\r\n    //NOTE - This history needs to be called outside any callback. So you must call it here\r\n    //       And it dosen't affect output becuase it will give us the history object from whihc we\r\n    //       can anytime later call push()\r\n    const history_obj = useHistory();\r\n    const [username,setUsername] = useState(\"\");\r\n    const [first,setFirst] = useState(\"\");\r\n    const [last,setLast] = useState(\"\");\r\n    const [phone,setPhone] = useState(\"\");\r\n    const [email,setEmail] = useState(\"\");\r\n    const [password,setPassword] = useState(\"\");\r\n\r\n    const [file, setFile] = useState(null);\r\n    const [profile_pic_url, setURL] = useState(\"\");\r\n\r\n\r\n    const addUser = () => {\r\n        const u_data = {username, first, last, phone, email, password, profile_pic_url}\r\n        console.log(profile_pic_url);\r\n        if(!username || !first || !last || !phone || !email || !password)\r\n            M.toast({html: \"Please fill all the feilds\", classes: \"#c62828 red darken-3\"});\r\n        // The below is reg exp for verifying emial. Can be obtained from net\r\n        else if(!/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(email))\r\n            M.toast({html: \"Please provide a valid email ID\", classes: \"#c62828 red darken-3\"});\r\n        else{\r\n            //NOTE 1 - we are not sending req to localhost:5000. But still it will be sent to 5000 due to proxy.\r\n            //NOTE 2 - Don't add - / before the url when using axios. add it after the proxy in package.json\r\n            axios.post(\"api/addUser\", u_data)\r\n            .then(res => {\r\n                M.toast({html: res.data.msg, classes:res.data.toastColor});\r\n                if(res.data.success)\r\n                    history_obj.push(\"/signin\");\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                M.toast({html: \"Internel Error occured. Try Later (F)\", classes: \"#c62828 red darken-3\"})\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className = \"card custom-card-signup\">\r\n            <div className = \"brand-logo\"><h3>Twitter</h3></div>\r\n                <div className=\"input-field\">\r\n                    <i className=\"custom-icon-size material-icons prefix\">face</i>\r\n                    <input type=\"text\" placeholder=\"First Name\" value = {first} onChange = {(event) => setFirst(event.target.value)} className=\"validate\"/>\r\n                </div>\r\n                <div className=\"input-field\">\r\n                    <i className=\"custom-icon-size material-icons prefix\">face</i>\r\n                    <input type=\"text\" placeholder=\"Last Name\" value = {last} onChange = {(event) => setLast(event.target.value)} className=\"validate\"/>\r\n                </div>\r\n                <div className=\"input-field\">\r\n                    <i className=\"custom-icon-size material-icons prefix\">phone</i>\r\n                    <input type=\"tel\" placeholder=\"Phone\" value = {phone} onChange = {(event) => setPhone(event.target.value)} className=\"validate\"/>\r\n                </div>\r\n                <div className=\"input-field\">\r\n                    <i className=\"custom-icon-size material-icons prefix\">email</i>\r\n                    <input type=\"email\" placeholder=\"Email\" value = {email} onChange = {(event) => setEmail(event.target.value)} className=\"validate\"/>\r\n                </div>\r\n                <div className=\"input-field\">\r\n                    <i className=\"custom-icon-size material-icons prefix\">account_circle</i>\r\n                    <input type=\"text\" placeholder=\"Username\" value = {username} onChange = {(event) => setUsername(event.target.value)} className=\"validate\"/>\r\n                </div>\r\n                <div className=\"input-field\">\r\n                    <i className=\"custom-icon-size material-icons prefix\">password</i>\r\n                    <input type=\"password\" placeholder=\"Password\" value = {password} onChange = {(event) => setPassword(event.target.value)} className=\"validate\"/>\r\n                </div>\r\n                <form className=\"row\" style={{marginTop: \"7%\"}} onSubmit={(e) => handleUpload(e, file, (url) => setURL(url), () => setFile(null))}>\r\n                    <input className=\"col s9\" type=\"file\" id=\"file\" onChange={(e) => setFile(e.target.files[0]) } style={{overflow: 'hidden', marginTop: \"11px\"}}/>\r\n                    <button className=\"col s3 btn waves-effect waves-light\">Upload</button>  {/* why this works - *explantion given below*/}\r\n                </form>\r\n                <button className=\"btn waves-effect waves-light custom-button-signin\" type=\"button\" onClick={addUser}>Signup\r\n                <i className=\"material-icons right\">person_add</i>\r\n            </button>\r\n        </div>\r\n        );\r\n}\r\n\r\nexport default Signup;\r\n\r\n\r\n// Why the button inside the form works and submits the form? (ans from - Cfreak) https://stackoverflow.com/questions/6617212/add-regular-button-inside-form-that-does-not-perform-a-submit\r\n// Via MDN: <button type=submit />: The button submits the form data to the server.\r\n// This is the default if the attribute is not specified, or if the attribute is \r\n// dynamically changed to an empty or invalid value. \r\n// <button type=button />: The button has no default behavior","C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\containers\\Navbar.js",["101","102"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport {useLocation} from 'react-router-dom';\r\nimport {Link} from 'react-router-dom';\r\nimport M from \"materialize-css\";\r\n\r\n\r\nconst Navbar = (props) => {\r\n    let sidenav_ref = useRef(null);\r\n    let active_route = useLocation();\r\n    useEffect(() => {\r\n        M.Sidenav.init(sidenav_ref.current, {\r\n            edge: \"right\",\r\n        });\r\n    }, []);\r\n\r\n    const routes = props.jwt ? \r\n                    [{\r\n                        url: \"/people\",\r\n                        icon: \"group\",\r\n                        label: \"People\"\r\n                    },\r\n                    {\r\n                        url: \"/userTweets\",\r\n                        icon: \"dashboard\",\r\n                        label: \"Your Tweets\"\r\n                    },\r\n                    {\r\n                        url: \"/Signout\",\r\n                        icon: \"exit_to_app\",\r\n                        label: \"Signout\"\r\n                    },]\r\n\r\n                    :\r\n\r\n                    [{\r\n                        url: \"/signin\",\r\n                        icon: \"account_circle\",\r\n                        label: \"Signin\"\r\n                    }, \r\n                    {\r\n                        url: \"/signup\",\r\n                        icon: \"person_add\",\r\n                        label: \"Signup\"\r\n                    },]\r\n\r\n\r\n    let active = \"active teal darken-2\";\r\n\r\n    return (\r\n        <>\r\n        <div className = \"navbar-fixed navbar-margin\">\r\n            <nav>\r\n                <div className=\"nav-wrapper custom-navbar\">\r\n                    <div className=\"brand-logo left\" >\r\n                        <Link to=\"/\">Twitter</Link>\r\n                    </div>\r\n                    <a href=\"#\" data-target=\"mobile-demo\" className=\"sidenav-trigger right\"><i className=\"material-icons\">menu</i></a>\r\n                    <ul className=\"right hide-on-med-and-down\">\r\n                        {\r\n                            routes.map((route, indx) => (\r\n                                <li key={indx} className={active_route.pathname === route.url ? active : null}>\r\n                                    <Link to={route.url}>\r\n                                        <i className=\"material-icons left\">{route.icon}</i>\r\n                                        <span style={{fontSize: \"13px\"/*, fontFamily: \"'Comfortaa', cursive\"*/}}>{route.label}</span>\r\n                                    </Link>\r\n                                </li>\r\n                            ))\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n        <ul className=\"sidenav sidenav-close\" id=\"mobile-demo\" ref={sidenav_ref}>\r\n        {\r\n            routes.map((route, indx) => (\r\n                <li key={indx}  className={active_route === route.url ? active : null}>\r\n                    <Link to={route.url}>\r\n                        <i className=\"material-icons left\">{route.icon}</i>\r\n                        {route.label}\r\n                    </Link>\r\n                </li>\r\n            ))\r\n        }\r\n        </ul>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n\r\n\r\n// import React, {useState, useEffect, useRef} from 'react';\r\n// import {Link} from 'react-router-dom';\r\n// import M from \"materialize-css\";\r\n\r\n\r\n// const Navbar = (props) => {\r\n//     let sidenav_ref = useRef(null);\r\n//     useEffect(() => {\r\n//         M.Sidenav.init(sidenav_ref.current, {\r\n//             edge: \"right\",\r\n//         });\r\n//     }, []);\r\n\r\n//     const routes = props.jwt ? \r\n//                     [{\r\n//                         url: \"/people\",\r\n//                         icon: \"group\",\r\n//                         label: \"People\"\r\n//                     },\r\n//                     {\r\n//                         url: \"/userTweets\",\r\n//                         icon: \"dashboard\",\r\n//                         label: \"Your Tweets\"\r\n//                     },\r\n//                     {\r\n//                         url: \"/Signout\",\r\n//                         icon: \"exit_to_app\",\r\n//                         label: \"Signout\"\r\n//                     },]\r\n\r\n//                     :\r\n\r\n//                     [{\r\n//                         url: \"/signin\",\r\n//                         icon: \"account_circle\",\r\n//                         label: \"Signin\"\r\n//                     }, \r\n//                     {\r\n//                         url: \"/signup\",\r\n//                         icon: \"person_add\",\r\n//                         label: \"Signup\"\r\n//                     },]\r\n\r\n\r\n//     let active = \"active teal darken-2\";\r\n\r\n//     return (\r\n//         <>\r\n//         <div className = \"navbar-fixed navbar-margin\">\r\n//             <nav>\r\n//                 <div className=\"nav-wrapper custom-navbar\">\r\n//                     <div className=\"brand-logo left\" onClick={() => props.setRoute(\"/\")}>\r\n//                         <Link to=\"/\">Twitter</Link>\r\n//                     </div>\r\n//                     <a href=\"#\" data-target=\"mobile-demo\" className=\"sidenav-trigger right\"><i className=\"material-icons\">menu</i></a>\r\n//                     <ul className=\"right hide-on-med-and-down\">\r\n//                         {\r\n//                             routes.map((route, indx) => (\r\n//                                 <li key={indx} onClick = {() => props.setRoute(route.url)} className={props.active_route === route.url ? active : null}>\r\n//                                     <Link to={route.url}>\r\n//                                         <i className=\"material-icons left\">{route.icon}</i>\r\n//                                         <span style={{fontSize: \"13px\"/*, fontFamily: \"'Comfortaa', cursive\"*/}}>{route.label}</span>\r\n//                                     </Link>\r\n//                                 </li>\r\n//                             ))\r\n//                         }\r\n//                     </ul>\r\n//                 </div>\r\n//             </nav>\r\n//         </div>\r\n//         <ul className=\"sidenav sidenav-close\" id=\"mobile-demo\" ref={sidenav_ref}>\r\n//         {\r\n//             routes.map((route, indx) => (\r\n//                 <li key={indx} onClick = {() => props.setRoute(route.url)} className={props.active_route === route.url ? active : null}>\r\n//                     <Link to={route.url}>\r\n//                         <i className=\"material-icons left\">{route.icon}</i>\r\n//                         {route.label}\r\n//                     </Link>\r\n//                 </li>\r\n//             ))\r\n//         }\r\n//         </ul>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default Navbar;","C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\containers\\UserTweets.js",["103","104"],"import axios from 'axios';\r\nimport React, {useState, useEffect} from 'react';\r\nimport M from 'materialize-css';\r\n\r\nimport AddPostModal from '../components/AddPostModal.js';\r\nimport TweetsList from '../components/TweetsList';\r\nimport Pagination from \"../components/Pagination\";\r\nimport loader from \"../misc/loader\";\r\n\r\n//STATIC HTML Given at end - in comments- IF YOU WANT TO PRACICE\r\n\r\nconst UserTweets = (props) => {\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [force_render, toggleState] = useState(true);//Don't get confused by true or false. It doesn't denote anything. Boolean is used so that we can \"easily change the value\" of force_rerender to force react to re-render in case the user is at first page when he opens addPostModal and posts a tweet\r\n    const [total_pages, setTotalPages] = useState(0);\r\n    const [posts, setPosts] = useState([]);\r\n    const [first_render, setFirstRender] = useState(true);\r\n\r\n    useEffect( () => {\r\n        loader(true, /*'loader2'*/);\r\n\r\n        axios.get(`api/getUserTweets?page=${page}&username=${props.username}`, {}, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + localStorage.getItem(\"jwt\"),\r\n                }\r\n        })\r\n        .then(res => {\r\n            if(res.data.success){\r\n                setPosts(res.data.posts);\r\n                setTotalPages(res.data.pages);\r\n            }\r\n            else\r\n                M.toast({html: res.data.msg, classes: res.data.toastColor});\r\n            \r\n            loader(false/*, 'loader2'*/);\r\n            if(first_render)\r\n                setFirstRender(false);\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            M.toast({html: \"Internl Error occured - Could Not Fetch Posts. Try later (F)\", classes: \"#c62828 red darken-3\"});\r\n            loader(false/*, 'loader2'*/);\r\n        });\r\n        \r\n    }, [page, force_render]);\r\n\r\n    return (   \r\n        [\r\n        props.logged ? <AddPostModal refetchTweets={page !== 0 ? \r\n                                                        () => setPage(0) : /* In case we are at page 0, useEffect will not be called even if we call setPage becuase there is no change in page num.*/\r\n                                                        () => toggleState(!force_render)} \r\n                        key=\"arr_elem_1\"/> : null\r\n        , \r\n        <div className=\"container\" key=\"arr_elem_2\">\r\n            <div className=\"progress\" /*id=\"loader2\"*/>\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n            { (posts.length === 0) ? (first_render) ? null : <center><h5>No Tweets. You Seem like a quite chap. Buckup a bit!</h5></center> :\r\n                <div className=\"row\">\r\n                    <div className=\"hide-on-small-only\">\r\n                        <TweetsList posts={posts} range={[0,4]} editable={props.editable} logged={props.logged} col_size=\"col s6\"/>\r\n                        <TweetsList posts={posts} range={[5,9]} editable={props.editable} logged={props.logged} col_size=\"col s6\"/>\r\n                    </div>\r\n                    <div className=\"show-on-small hide-on-med-and-up\">\r\n                        <TweetsList posts={posts} range={[0,9]} editable={props.editable} logged={props.logged} col_size=\"col s12\"/>\r\n                    </div>\r\n                    \r\n                </div>\r\n            }\r\n            <div className=\"row\">\r\n                <Pagination page={page} setPage={setPage} total_pages={total_pages} />\r\n            </div>\r\n        </div>\r\n        ]\r\n     );\r\n}\r\n\r\nexport default UserTweets;\r\n\r\n\r\n\r\n\r\n\r\n{/*\r\n    <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className = \"col s6\">\r\n                    <ul className=\"collection\">\r\n                        <li className=\"collection-item avatar\" key= \"SD\">\r\n                        <img src=\"images/yuna.jpg\" alt=\"\" className=\"circle\"/>\r\n                        <span className=\"title\">Title</span>\r\n                        <p>First Line</p>\r\n                        <a href=\"#!\" className=\"secondary-content\"><i className=\"material-icons\">playlist_add</i></a>\r\n                        </li>\r\n                        <li className=\"collection-item avatar\">\r\n                        <i className=\"material-icons circle\">person</i>\r\n                        <span className=\"title\">Title</span>\r\n                        <p>First Line </p>\r\n                        <a href=\"#!\" className=\"secondary-content\"><i className=\"material-icons\">grade</i></a>\r\n                        </li>\r\n                        <li className=\"collection-item avatar\">\r\n                        <i className=\"material-icons circle green\">insert_chart</i>\r\n                        <span className=\"title\">Title</span>\r\n                        <p>First Line </p>\r\n                        <a href=\"#!\" className=\"secondary-content\"><i className=\"material-icons\">grade</i></a>\r\n                        </li>\r\n                        <li className=\"collection-item avatar\">\r\n                        <i className=\"material-icons circle red\">play_arrow</i>\r\n                        <span className=\"title\">Title</span>\r\n                        <p>First Line</p>\r\n                        <a href=\"#!\" className=\"secondary-content\"><i className=\"material-icons\">grade</i></a>\r\n                        </li>\r\n                        <li className=\"collection-item avatar\">\r\n                        <i className=\"material-icons circle red\">person</i>\r\n                        <span className=\"title\">Title</span>\r\n                        <p>First Line</p>\r\n                        <a href=\"#!\" className=\"secondary-content\"><i className=\"material-icons\">grade</i></a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                <div className = \"col s6\">\r\n                    <ul className=\"collection\">\r\n                        <li className=\"collection-item avatar\">\r\n                        <img src=\"images/yuna.jpg\" alt=\"\" className=\"circle\"/>\r\n                        <span className=\"title\">Title</span>\r\n                        <p>First Line</p>\r\n                        <a href=\"#!\" className=\"secondary-content\"><i className=\"material-icons\">playlist_add_check</i></a>\r\n                        </li>\r\n                        <li className=\"collection-item avatar\">\r\n                        <i className=\"material-icons circle\">folder</i>\r\n                        <span className=\"title\">Title</span>\r\n                        <p>First Line</p>\r\n                        <a href=\"#!\" className=\"secondary-content\"><i className=\"material-icons\">grade</i></a>\r\n                        </li>\r\n                        <li className=\"collection-item avatar\">\r\n                        <i className=\"material-icons circle green\">insert_chart</i>\r\n                        <span className=\"title\">Title</span>\r\n                        <p>First Line </p>\r\n                        <a href=\"#!\" className=\"secondary-content\"><i className=\"material-icons\">grade</i></a>\r\n                        </li>\r\n                        <li className=\"collection-item avatar\">\r\n                        <i className=\"material-icons circle red\">play_arrow</i>\r\n                        <span className=\"title\">Title</span>\r\n                        <p>First Line</p>\r\n                        <a href=\"#!\" className=\"secondary-content\"><i className=\"material-icons\">grade</i></a>\r\n                        </li>\r\n                        <li className=\"collection-item avatar\">\r\n                        <i className=\"material-icons circle red\">play_arrow</i>\r\n                        <span className=\"title\">Title</span>\r\n                        <p>First Line</p>\r\n                        <a href=\"#!\" className=\"secondary-content\"><i className=\"material-icons\">grade</i></a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            <ul className=\"pagination\" style = {{textAlign: 'center'}}>\r\n                <li className=\"disabled\"><a href=\"#!\"><i className=\"material-icons\">chevron_left</i></a></li>\r\n                <li className=\"active\"><a href=\"#!\">1</a></li>\r\n                <li className=\"waves-effect\"><a href=\"#!\">2</a></li>\r\n                <li className=\"waves-effect\"><a href=\"#!\">3</a></li>\r\n                <li className=\"waves-effect\"><a href=\"#!\">4</a></li>\r\n                <li className=\"waves-effect\"><a href=\"#!\">5</a></li>\r\n                <li className=\"waves-effect\"><a href=\"#!\"><i className=\"material-icons\">chevron_right</i></a></li>\r\n            </ul>\r\n        </div> */}","C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\containers\\Signin.js",[],"C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\components\\AddPostModal.js",["105","106","107","108"],"import React, { Component } from \"react\";\r\nimport M from \"materialize-css\";\r\nimport axios from \"axios\";\r\nimport he from \"he\";\r\n\r\nimport loader from \"../misc/loader\";\r\nimport handleUpload from \"../misc/imageUpload\";\r\n\r\nclass AddPostModal extends Component {\r\n  state = {\r\n    tweet_pic_url: null,\r\n    tweet_pic: null,\r\n  } // how directly setting state (without constructor) here is working - https://hackernoon.com/the-constructor-is-dead-long-live-the-constructor-c10871bea599\r\n  \r\n  instance = null;\r\n\r\n  componentDidMount() {\r\n    const options = {\r\n      onOpenStart: () => console.log(\"Open Start\"),\r\n      onOpenEnd: () => console.log(\"Open End\"),\r\n      onCloseStart: () => console.log(\"Close Start\"),\r\n      onCloseEnd: () => console.log(\"Close End\"),\r\n      inDuration: 250,\r\n      outDuration: 250,\r\n      opacity: 0.5,\r\n      dismissible: true,\r\n      startingTop: \"4%\",\r\n      endingTop: \"10%\"\r\n    };\r\n    M.Modal.init(this.Modal, options);\r\n    this.instance = M.Modal.getInstance(this.Modal);\r\n  }\r\n\r\n\r\n  closeModal(){\r\n    loader(false/*,'loader2'*/);\r\n    this.instance.close();//CHECK - if destroy() works \r\n  }\r\n  \r\n  addPost = (tweet_div) => {\r\n    loader(true/*, 'loader2'*/);//Defined in app.js\r\n    const data = {\r\n        // username: \"nik32\", //This will be fetched from server using our token\r\n        tweet: he.encode(tweet_div.innerHTML),\r\n        tweet_pic_url: this.state.tweet_pic_url,\r\n        // profile_pic_url: localStorage.getItem(\"user\").profile_pic_url\r\n    }\r\n    axios.post(\"api/postTweet\", data, {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Bearer ' + localStorage.getItem(\"jwt\"),\r\n          }\r\n    })\r\n    .then((res) => {\r\n      if(res.data.success){\r\n        tweet_div.innerHTML = \"\";\r\n        this.props.refetchTweets();\r\n      }\r\n      M.toast({html: res.data.msg, classes: res.data.toastColor});\r\n      this.closeModal();\r\n    })\r\n    .catch((err) =>{\r\n      console.log(err);\r\n      M.toast({html: \"Internel Error occured. Try Later. (F-AddPostModal)\", classes: \"#c62828 red darken-3\"});\r\n      this.closeModal();\r\n    });\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <a data-target=\"modal1\" className=\"modal-trigger btn-floating btn-large waves-effect waves-light red\" style={{position: \"fixed\", right: \"75px\", bottom: \"50px\"}}>\r\n            <i className=\"material-icons\">mode_edit</i>{/*Floating button */}\r\n        </a>\r\n        \r\n        <div id=\"modal1\" className=\"modal\" ref={Modal => this.Modal = Modal}>\r\n\r\n        <div className=\"modal-content\" style={{padding: \"5% 10%\"}}>\r\n          \r\n          <h5>What's On Your Mind?</h5>\r\n          <div contentEditable=\"true\" id=\"tweet\" style={{marginTop: \"4%\", marginBottom: \"2px\"}}></div>\r\n          <div class=\"divider\" style={{marginBottom: \"7%\"}}></div>\r\n\r\n          <form className=\"row\" onSubmit={(e) => handleUpload(e, this.state.tweet_pic, (tweet_pic_url) => this.setState({tweet_pic_url}), () => this.setState({tweet_pic: null}))}>\r\n            <input className=\"col s9\" type=\"file\" id=\"file\" onChange={(e) => this.setState({tweet_pic: e.target.files[0]})} style={{overflow: 'hidden', padding: \"0\"}} />\r\n            <button className=\"btn waves-effect waves-light col s3\" style={{float:\"right\"}}>Upload</button>\r\n          </form>\r\n\r\n          <div id=\"tweet-pic\">\r\n            <img src={this.state.tweet_pic_url} />\r\n          </div> \r\n\r\n        </div>\r\n\r\n        <div className=\"modal-footer\" style={{paddingRight: \"7%\", paddingBottom: \"12%\"}}>\r\n          <a className=\"modal-close waves-effect waves-red btn-flat\">\r\n            Cancel\r\n          </a>\r\n          <a className=\"waves-effect waves-green btn-flat\" onClick={() => this.addPost(document.getElementById(\"tweet\")) }>\r\n            Post\r\n          </a>\r\n        </div>\r\n\r\n      </div>\r\n    </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddPostModal;","C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\components\\TweetsList.js",[],"C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\components\\Pagination.js",["109","110","111"],"import React from 'react';\r\n\r\n/*  REFRENCES -  1. FOR Moving TO TOP ON PAGE BUTTON CLICK\r\n                    1. Just use href with \"#\" (https://stackoverflow.com/questions/43611173/button-onclick-makes-page-jump-to-top-of-page/43611265)\r\n                    2. Or DO it with JS (add it in onClick function) as shown below (https://www.w3schools.com/howto/howto_js_scroll_to_top.asp) - \r\n                            <a onClick={() =>  {\r\n                                setPage(page);\r\n                                document.body.scrollTop = 0; // For Safari\r\n                                document.documentElement.scrollTop = 0;\r\n                            }}> {page+1} </a>\r\n\r\n */\r\n\r\nconst Pagination = (props) => {\r\n    let pages_arr = [];\r\n    for(let i = 0 ; i < props.total_pages ; i++)\r\n        pages_arr[i] = i;\r\n\r\n    const changePage = (page) => {\r\n        props.setPage(page);\r\n        document.body.scrollTop = 0; // For Safari\r\n        document.documentElement.scrollTop = 0;// For Chrome, Firefox, IE anOpera\r\n    }\r\n\r\n    return (\r\n        <ul className=\"pagination\" style = {{textAlign: 'center'}}>\r\n            <li className={props.page === 0 ? \"disabled\" : \"waves-effect\"}>\r\n                <a onClick={props.page === 0 ? null : () => changePage(props.page - 1)}><i className=\"material-icons\">chevron_left</i></a>\r\n            </li>\r\n            {\r\n                pages_arr.map(page => (<li className={props.page === page ? \"active\" :\"waves-effect\"} key={page}>\r\n                                            <a onClick={() =>  changePage(page)}> {page+1} </a>\r\n                                        </li>))\r\n            }\r\n            <li className={props.page === (pages_arr.length - 1) ? \"disabled\" : \"waves-effect\"}>\r\n                <a onClick={props.page === (pages_arr.length - 1) ? null : () => changePage(props.page + 1)}><i className=\"material-icons\">chevron_right</i></a>\r\n            </li>\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default Pagination;","C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\components\\PeopleList.js",[],"C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\misc\\loader.js",[],"C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\misc\\imageUpload.js",[],"C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\components\\Tweet.js",["112","113","114","115"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport moment from 'moment';\r\nimport axios from 'axios';\r\nimport M from 'materialize-css';\r\nimport he from \"he\";//used to encode and decode the string to preserve the html formatting\r\n\r\nimport ProfileModal from '../components/ProfileModal';\r\nimport loader from \"../misc/loader\";\r\n\r\n\r\nconst Tweet = (props) => {\r\n    const colors = [\"red\", \"green\", \"blue\", \"yellow\", \"purple\", \"pink\"];\r\n    let random_color = `material-icons circle ${colors[Math.floor(Math.random() * 108) % 6]}`;\r\n\r\n    let data_target = null, class_val = \"title\", onClick_val = null, cursor_style = null;\r\n    if(props.show_profile){\r\n        cursor_style = \"pointer\";\r\n        data_target = \"modal2\";\r\n        class_val = \"title modal-trigger\";\r\n        onClick_val = () => setProfile(true); \r\n    }\r\n\r\n    const warningOnFocus = (event) => {\r\n        if(event.target.isContentEditable && event.target.innerHTML !== \"\")\r\n            event.target.innerHTML += \"<div contenteditable='false' class='warning'><span style='color:darkgrey;font-size:10px;'> (Press Enter to save permanently)</span></div>\"\r\n    }\r\n    \r\n    const removeWarning = () => {\r\n        let elements = document.getElementsByClassName(\"warning\");\r\n        while(elements.length > 0)\r\n            elements[0].parentNode.removeChild(elements[0]);\r\n    }\r\n\r\n    //This will hide tweets (and disply loader) or show tweets (and hide loader)\r\n    const hideTweets = (hide_tweets) => {\r\n        const tweets_display_style = hide_tweets ? \"none\" : \"block\";\r\n        const show_loader = hide_tweets;\r\n        \r\n        let lists = document.getElementsByClassName(\"row\");//Tweets are in row[0] and pagination is in row[1] \r\n        for(let list of lists)\r\n            list.style.display = tweets_display_style;\r\n        loader(show_loader/*, document.getElementById(\"loader1\") ? \"loader1\" : :loader2:*/);\r\n    }\r\n\r\n    const handleRequest = (promise_obj, follower) => {\r\n        promise_obj\r\n        .then(res => {\r\n            M.toast({html: res.data.msg, classes:res.data.toastColor});\r\n            hideTweets(false);\r\n            if(follower) {//We will get follower only if handleRequest() is called by followPerson()\r\n               const follow_icons = document.getElementsByClassName(follower);\r\n               for(let follow_icon of follow_icons)\r\n                follow_icon.style.display = \"none\";\r\n            }\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            M.toast({html: \"Internel Error occured. Try Later. (F)\", classes: \"#c62828 red darken-3\"});\r\n            hideTweets(false);\r\n        });\r\n    }\r\n\r\n    const followPerson = (follower, followee, pics) => {\r\n        hideTweets(true); \r\n        const body = {follower, followee, pics};\r\n        handleRequest(\r\n            axios.post(\"api/follow\", body, {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': 'Bearer ' + localStorage.getItem(\"jwt\"),\r\n                }\r\n            }),\r\n            follower\r\n        );\r\n    }\r\n    \r\n    const saveEditToDB = (event, tweet_id) => {\r\n        //1. Instead of sending request on each tweet edit (i.e. on each press of enter), we can make state var called - edits. In it we can save the new comments with their ids.\r\n        //2. Now as soon as this state var (edits) will have some value, we can show floating button to save all edits.\r\n        //3. Whenever, user clicks on the button, we send the \"edits\" object in the request and at the backend \r\n        //   we can either make a req to db for each edit or we can further optimize by using aggregate framework (https://stackoverflow.com/questions/17207183/way-to-update-multiple-documents-with-different-values#:~:text=You%20can%20not%20update%20two,MongoDB%20with%20the%20same%20query.)\r\n        //4. but the above will atleast reduce the number of calls from frontend to backend. \r\n        if (event.keyCode === 13 && !event.shiftKey) {\r\n            // Cancel the default action, if needed\r\n            event.preventDefault();\r\n            event.target.blur();\r\n\r\n            hideTweets(true);\r\n\r\n            //Code for request\r\n            const u_data = {tweet: he.encode(event.target.innerHTML), tweet_id}; /*he.encode() is Used to maintain the html markup.*/\r\n            const response_obj = axios.patch(\"api/patchTweet\", u_data, {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': 'Bearer ' + localStorage.getItem(\"jwt\"),\r\n                    }\r\n                });\r\n            handleRequest(response_obj);\r\n\r\n          }\r\n    }\r\n\r\n    //If user clears the text area then he won;t be able to enter anything due to the warning. So remove the warning if it become empty\r\n    const handleEmptiness = (event) => {\r\n        //The box will be empty if there is only the code for warning\r\n        if(event.target.innerHTML == '<div contenteditable=\"false\" class=\"warning\"><span style=\"color:darkgrey;font-size:10px;\"> (Press Enter to save permanently)</span></div>')\r\n            removeWarning();\r\n    }\r\n\r\n    let para_ref = useRef(null);\r\n    let follow_btn_ref = useRef(null);\r\n    let tweet_pics_ref = useRef(null);\r\n    useEffect( () => {\r\n        M.Tooltip.init(para_ref.current, {margin: 0, html: \"Click to Edit\", exitDelay: 0});\r\n        M.Tooltip.init(follow_btn_ref.current, {margin: 0, html: \"Follow\", exitDelay: 0});\r\n        M.Materialbox.init(tweet_pics_ref.current);\r\n    }, []);\r\n\r\n    const [profile, setProfile] = useState(false);\r\n\r\n    return (\r\n        <li className=\"collection-item avatar\">\r\n            {profile ? <ProfileModal username = {props.post.username} closeProfile={()=> setProfile(false)}/> : null}\r\n            {\r\n                props.post.profile_pic_url ? \r\n                    <div>{/*NOTE - This Div is necessary to avoid error when using maerailbox for the profile pic*/}\r\n                        <img src={props.post.profile_pic_url} alt=\"\" className=\"responsive-img circle materialboxed\" ref={tweet_pics_ref}/>\r\n                    </div>  : \r\n                    <i className={random_color}>person</i>\r\n            }\r\n            <span className={class_val} onClick={onClick_val} data-target={data_target} style={{wordWrap: \"break-word\", cursor: cursor_style}}>\r\n                {props.post.username}\r\n            </span>\r\n            <p className=\"tweet-style add tooltipped\" ref={props.editable ? para_ref : null} contentEditable={props.editable} suppressContentEditableWarning={true} onFocus={warningOnFocus} onBlur={removeWarning} onKeyDown={(event) => saveEditToDB(event, props.post._id)} onKeyUp = {(e) => handleEmptiness(e)} \r\n            dangerouslySetInnerHTML={{__html: he.decode(props.post.tweet)}}>{/*This will set the inner html to the string provided in __html attribute. The string should contain htmls tags in form of numaric/endcoded format thus used \"he\" for the purpose*/}\r\n            </p>\r\n            {props.post.tweet_pic_url ? \r\n                    <div className=\"tweet-pic-div\">{/*https://stackoverflow.com/questions/3029422/how-do-i-auto-resize-an-image-to-fit-a-div-container*/}\r\n                        <img src={props.post.tweet_pic_url} ref={tweet_pics_ref} className=\"materialboxed\" style={{maxWidth :\"100%\", maxHeight: \"100%\", height: \"auto\"}}></img>\r\n                    </div> \r\n                    : null}\r\n            <p className=\"tweet-style\" style={{color: \"darkgrey\", fontSize: \"12px\"}}> - {moment(props.post.date_time).fromNow()}</p>\r\n            {/* Display the link only when a person is logged in */}\r\n            \r\n            {props.post.not_following && localStorage.getItem(\"user\") ? \r\n                <a style={{cursor: \"pointer\"}} className={\"secondary-content tooltipped \" + props.post.username} ref={follow_btn_ref} onClick={() => followPerson(props.post.username, JSON.parse(localStorage.getItem(\"user\")).username, {follower: props.post.profile_pic_url, followee: JSON.parse(localStorage.getItem(\"user\")).profile_pic_url})}>\r\n                    <i className=\"material-icons\">playlist_add</i>\r\n                </a> : null}\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Tweet;","C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\components\\Person.js",[],"C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\misc\\firebase.js",[],"C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\config.js",[],"C:\\Users\\nikhi\\Desktop\\Web development\\Projects\\Twitter Mock - Addskill Hackathon\\server\\client\\src\\components\\ProfileModal.js",["116","117"],"import React, { Component } from \"react\";\r\nimport M from \"materialize-css\";\r\n\r\nimport UserTweets from \"../containers/UserTweets\"\r\nimport People from \"../containers/People\";\r\n\r\nclass ProfileModal extends Component {\r\n  \r\n  _window = Object.freeze({TWEETS: 1, PEOPLE: 2}); \r\n  state = {\r\n    curr_page: this._window.TWEETS,\r\n  }\r\n  //instance = null;\r\n\r\n  componentDidMount() {\r\n    const options = {\r\n      onOpenStart: () => console.log(\"Open Start\"),\r\n      onOpenEnd: () => console.log(\"Open End\"),\r\n      onCloseStart: () => this.props.closeProfile(),\r\n      onCloseEnd: () => console.log(\"Close End\"),\r\n      inDuration: 250,\r\n      outDuration: 250,\r\n      opacity: 0.75,\r\n      dismissible: true,\r\n      startingTop: \"4%\",\r\n      endingTop: \"10%\",\r\n    };\r\n    M.Modal.init(this.Modal, options);\r\n    M.Tabs.init(this.tab);\r\n    //this.instance = M.Modal.getInstance(this.Modal); //if you want to use modal functions like open(), close(), destroy(), then the instance on which we call these functions will be obtained from this code line. Now we can call - this.instance.<method> to call the <method>\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div id=\"modal2\" className=\"modal\" ref={Modal => this.Modal = Modal}>\r\n\r\n        <div className=\"modal-content\" style={{padding:\"0px\"}}>\r\n          <div className = \"navbar-fixed navbar-margin\">\r\n            <nav className=\"nav-extended\">\r\n              <div className=\"nav-wrapper custom-navbar\">\r\n                <div className=\"brand-logo center\">{this.props.username}</div>\r\n                <ul id=\"nav-mobile\" className=\"right\">\r\n                  <li style={{color:\"#011627\"}}>Dummy</li>{/*Used this just for design purposes. Just wanted to display the tabs in next line of the username. But removing this would display them in same line. That's why the color of text is smae as that of nav bar, to hid the text*/}\r\n                </ul>\r\n                <div className=\"nav-content\">\r\n                  <ul className=\"tabs tabs-transparent tabs-fixed-width\" ref={tab => this.tab = tab} style={{overflowX: \"hidden\"}}>\r\n                    <li className=\"tab\" onClick={ () => this.setState({curr_page: this._window.TWEETS,}) }>\r\n                      <a className={this.state.curr_page === this._window.TWEETS ? \"active\" : null}>\r\n                        Tweets\r\n                      </a>\r\n                    </li>\r\n                    <li className=\"tab\" onClick={ () => this.setState({curr_page: this._window.PEOPLE,}) }>\r\n                      <a className={this.state.curr_page === this._window.PEOPLE ? \"active\" : null}>\r\n                        People\r\n                      </a>\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n            </nav>\r\n          </div>\r\n          <div className=\"row\" style={{marginTop:\"10%\", marginLeft: \"0\", marginRight: \"0\"}}>\r\n            {\r\n              this.state.curr_page === this._window.TWEETS ?\r\n                <UserTweets username={this.props.username} /*loader={loader}*/ editable={false}/> :\r\n                <People username={this.props.username} /*loader_name=\"loader4\"*/ show_profile={false}/>\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProfileModal;",{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","severity":1,"message":"123","line":1,"column":41,"nodeType":"124","messageId":"125","endLine":1,"endColumn":51},{"ruleId":"126","severity":1,"message":"127","line":47,"column":8,"nodeType":"128","endLine":47,"endColumn":14,"suggestions":"129"},{"ruleId":"126","severity":1,"message":"127","line":48,"column":8,"nodeType":"128","endLine":48,"endColumn":10,"suggestions":"130"},{"ruleId":"131","severity":1,"message":"132","line":73,"column":1,"nodeType":"133","messageId":"134","endLine":125,"endColumn":13},{"ruleId":"135","severity":1,"message":"136","line":30,"column":28,"nodeType":"137","messageId":"138","endLine":30,"endColumn":29,"suggestions":"139"},{"ruleId":"135","severity":1,"message":"136","line":30,"column":53,"nodeType":"137","messageId":"138","endLine":30,"endColumn":54,"suggestions":"140"},{"ruleId":"122","severity":1,"message":"141","line":1,"column":16,"nodeType":"124","messageId":"125","endLine":1,"endColumn":24},{"ruleId":"142","severity":1,"message":"143","line":57,"column":21,"nodeType":"144","endLine":57,"endColumn":93},{"ruleId":"126","severity":1,"message":"127","line":47,"column":8,"nodeType":"128","endLine":47,"endColumn":28,"suggestions":"145"},{"ruleId":"131","severity":1,"message":"132","line":86,"column":1,"nodeType":"133","messageId":"134","endLine":167,"endColumn":19},{"ruleId":"142","severity":1,"message":"146","line":74,"column":9,"nodeType":"144","endLine":74,"endColumn":170},{"ruleId":"147","severity":1,"message":"148","line":92,"column":13,"nodeType":"144","endLine":92,"endColumn":51},{"ruleId":"142","severity":1,"message":"146","line":98,"column":11,"nodeType":"144","endLine":98,"endColumn":70},{"ruleId":"142","severity":1,"message":"146","line":101,"column":11,"nodeType":"144","endLine":101,"endColumn":124},{"ruleId":"142","severity":1,"message":"146","line":28,"column":17,"nodeType":"144","endLine":28,"endColumn":89},{"ruleId":"142","severity":1,"message":"146","line":32,"column":45,"nodeType":"144","endLine":32,"endColumn":82},{"ruleId":"142","severity":1,"message":"146","line":36,"column":17,"nodeType":"144","endLine":36,"endColumn":110},{"ruleId":"149","severity":1,"message":"150","line":106,"column":35,"nodeType":"151","messageId":"152","endLine":106,"endColumn":37},{"ruleId":"153","severity":1,"message":"154","line":134,"column":13,"nodeType":"155","endLine":136,"endColumn":17},{"ruleId":"147","severity":1,"message":"148","line":139,"column":25,"nodeType":"144","endLine":139,"endColumn":170},{"ruleId":"142","severity":1,"message":"146","line":146,"column":17,"nodeType":"144","endLine":146,"endColumn":344},{"ruleId":"142","severity":1,"message":"146","line":49,"column":23,"nodeType":"144","endLine":49,"endColumn":101},{"ruleId":"142","severity":1,"message":"146","line":54,"column":23,"nodeType":"144","endLine":54,"endColumn":101},"no-native-reassign",["156"],"no-negated-in-lhs",["157"],"no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'first_render' and 'props.username'. Either include them or remove the dependency array.","ArrayExpression",["158"],["159"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["160","161"],["162","163"],"'useState' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["164"],"The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/no-danger-with-children","Only set one of `children` or `props.dangerouslySetInnerHTML`","JSXElement","no-global-assign","no-unsafe-negation",{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"messageId":"169","fix":"170","desc":"171"},{"messageId":"172","fix":"173","desc":"174"},{"messageId":"169","fix":"175","desc":"171"},{"messageId":"172","fix":"176","desc":"174"},{"desc":"177","fix":"178"},"Update the dependencies array to be: [first_render, page, props.username]",{"range":"179","text":"180"},"Update the dependencies array to be: [first_render, props.username]",{"range":"181","text":"182"},"removeEscape",{"range":"183","text":"184"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"185","text":"186"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"187","text":"184"},{"range":"188","text":"186"},"Update the dependencies array to be: [page, force_render, props.username, first_render]",{"range":"189","text":"190"},[1726,1732],"[first_render, page, props.username]",[1871,1873],"[first_render, props.username]",[1315,1316],"",[1315,1315],"\\",[1340,1341],[1340,1340],[1919,1939],"[page, force_render, props.username, first_render]"]